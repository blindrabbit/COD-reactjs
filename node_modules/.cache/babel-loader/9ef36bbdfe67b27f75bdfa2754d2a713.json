{"ast":null,"code":"import { map } from './map';\nimport { innerFrom } from '../observable/from';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\nexport function mergeMap(project, resultSelector, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Infinity;\n  }\n\n  if (isFunction(resultSelector)) {\n    return mergeMap(function (a, i) {\n      return map(function (b, ii) {\n        return resultSelector(a, b, i, ii);\n      })(innerFrom(project(a, i)));\n    }, concurrent);\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return operate(function (source, subscriber) {\n    return mergeInternals(source, subscriber, project, concurrent);\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/mergeMap.ts"],"names":[],"mappings":"AACA,SAAS,GAAT,QAAoB,OAApB;AACA,SAAS,SAAT,QAA0B,oBAA1B;AACA,SAAS,OAAT,QAAwB,cAAxB;AACA,SAAS,cAAT,QAA+B,kBAA/B;AACA,SAAS,UAAT,QAA2B,oBAA3B;AA2EA,OAAM,SAAU,QAAV,CACJ,OADI,EAEJ,cAFI,EAGJ,UAHI,EAGyB;AAA7B,MAAA,UAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,UAAA,GAAA,QAAA;AAA6B;;AAE7B,MAAI,UAAU,CAAC,cAAD,CAAd,EAAgC;AAE9B,WAAO,QAAQ,CAAC,UAAC,CAAD,EAAI,CAAJ,EAAK;AAAK,aAAA,GAAG,CAAC,UAAC,CAAD,EAAS,EAAT,EAAmB;AAAK,eAAA,cAAc,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAd,EAAc,CAAd;AAA2B,OAApD,CAAH,CAAyD,SAAS,CAAC,OAAO,CAAC,CAAD,EAA1E,CAA0E,CAAR,CAAlE,CAAA;AAAkF,KAA7F,EAA+F,UAA/F,CAAf;AACD,GAHD,MAGO,IAAI,OAAO,cAAP,KAA0B,QAA9B,EAAwC;AAC7C,IAAA,UAAU,GAAG,cAAb;AACD;;AAED,SAAO,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT,EAAmB;AAAK,WAAA,cAAc,CAAC,MAAD,EAAS,UAAT,EAAqB,OAArB,EAAd,UAAc,CAAd;AAAuD,GAAhF,CAAd;AACD","sourceRoot":"","sourcesContent":["import { map } from './map';\r\nimport { innerFrom } from '../observable/from';\r\nimport { operate } from '../util/lift';\r\nimport { mergeInternals } from './mergeInternals';\r\nimport { isFunction } from '../util/isFunction';\r\nexport function mergeMap(project, resultSelector, concurrent) {\r\n    if (concurrent === void 0) { concurrent = Infinity; }\r\n    if (isFunction(resultSelector)) {\r\n        return mergeMap(function (a, i) { return map(function (b, ii) { return resultSelector(a, b, i, ii); })(innerFrom(project(a, i))); }, concurrent);\r\n    }\r\n    else if (typeof resultSelector === 'number') {\r\n        concurrent = resultSelector;\r\n    }\r\n    return operate(function (source, subscriber) { return mergeInternals(source, subscriber, project, concurrent); });\r\n}\r\n//# sourceMappingURL=mergeMap.js.map"]},"metadata":{},"sourceType":"module"}